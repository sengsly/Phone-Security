
Phone Security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000138  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001c7  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013b  00000000  00000000  000003eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000183  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b8  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	2c d0       	rcall	.+88     	; 0x9c <main>
  44:	77 c0       	rjmp	.+238    	; 0x134 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z8Blink_Oni>:
unsigned int status=0;

void Blink_On(int b){			//Blink and then turn on
	
	for(int i=0;i<3;i++){
		BIT_CLEAR(LED_PORT,b);
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	a9 01       	movw	r20, r18
  4e:	02 c0       	rjmp	.+4      	; 0x54 <_Z8Blink_Oni+0xc>
  50:	44 0f       	add	r20, r20
  52:	55 1f       	adc	r21, r21
  54:	8a 95       	dec	r24
  56:	e2 f7       	brpl	.-8      	; 0x50 <_Z8Blink_Oni+0x8>
  58:	ca 01       	movw	r24, r20
  5a:	40 95       	com	r20
		_delay_ms(BLINK_PERIOD);
		
		BIT_SET(LED_PORT,b);
  5c:	23 e0       	ldi	r18, 0x03	; 3
  5e:	30 e0       	ldi	r19, 0x00	; 0
unsigned int status=0;

void Blink_On(int b){			//Blink and then turn on
	
	for(int i=0;i<3;i++){
		BIT_CLEAR(LED_PORT,b);
  60:	92 b3       	in	r25, 0x12	; 18
  62:	94 23       	and	r25, r20
  64:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	5f e7       	ldi	r21, 0x7F	; 127
  68:	68 e3       	ldi	r22, 0x38	; 56
  6a:	91 e0       	ldi	r25, 0x01	; 1
  6c:	51 50       	subi	r21, 0x01	; 1
  6e:	60 40       	sbci	r22, 0x00	; 0
  70:	90 40       	sbci	r25, 0x00	; 0
  72:	e1 f7       	brne	.-8      	; 0x6c <_Z8Blink_Oni+0x24>
  74:	00 c0       	rjmp	.+0      	; 0x76 <_Z8Blink_Oni+0x2e>
  76:	00 00       	nop
		_delay_ms(BLINK_PERIOD);
		
		BIT_SET(LED_PORT,b);
  78:	92 b3       	in	r25, 0x12	; 18
  7a:	98 2b       	or	r25, r24
  7c:	92 bb       	out	0x12, r25	; 18
  7e:	5f e7       	ldi	r21, 0x7F	; 127
  80:	68 e3       	ldi	r22, 0x38	; 56
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	51 50       	subi	r21, 0x01	; 1
  86:	60 40       	sbci	r22, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <_Z8Blink_Oni+0x3c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_Z8Blink_Oni+0x46>
  8e:	00 00       	nop
  90:	21 50       	subi	r18, 0x01	; 1
  92:	31 09       	sbc	r19, r1

unsigned int status=0;

void Blink_On(int b){			//Blink and then turn on
	
	for(int i=0;i<3;i++){
  94:	21 15       	cp	r18, r1
  96:	31 05       	cpc	r19, r1
  98:	19 f7       	brne	.-58     	; 0x60 <_Z8Blink_Oni+0x18>
		_delay_ms(BLINK_PERIOD);
		
		BIT_SET(LED_PORT,b);
		_delay_ms(BLINK_PERIOD);
	}
}
  9a:	08 95       	ret

0000009c <main>:
int main(void)
{
	unsigned int i=0;
	INP_PORTDDR=0x0;			//as input
  9c:	17 ba       	out	0x17, r1	; 23
	LED_PORTDDR=0xff;			//as output
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	ALM_PORTDDR=0x1;			//as output on PIN0
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	94 bb       	out	0x14, r25	; 20
	

	INP_PORT=0xff;			//pull up resistor to high
  a6:	88 bb       	out	0x18, r24	; 24
	LED_PORT=0;				//Turn off all LEDs
  a8:	12 ba       	out	0x12, r1	; 18
	ALM_PORT=0;
  aa:	15 ba       	out	0x15, r1	; 21

    while(1)
	
    {
		
		for(i=0;i<4;i++){
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	c1 2c       	mov	r12, r1
  b2:	d1 2c       	mov	r13, r1
			if( BIT_CHECK(INP_PORTPIN,i) && (!BIT_CHECK(status,i))) {
  b4:	01 e0       	ldi	r16, 0x01	; 1
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	1c c0       	rjmp	.+56     	; 0xf2 <main+0x56>
  ba:	26 b3       	in	r18, 0x16	; 22
  bc:	8c 2f       	mov	r24, r28
  be:	9d 2f       	mov	r25, r29
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	0c 2e       	mov	r0, r28
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x2e>
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x2a>
  ce:	20 ff       	sbrs	r18, 0
  d0:	0f c0       	rjmp	.+30     	; 0xf0 <main+0x54>
  d2:	78 01       	movw	r14, r16
  d4:	0c 2e       	mov	r0, r28
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x40>
  d8:	ee 0c       	add	r14, r14
  da:	ff 1c       	adc	r15, r15
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <main+0x3c>
  e0:	20 91 60 00 	lds	r18, 0x0060
  e4:	30 91 61 00 	lds	r19, 0x0061
  e8:	2e 21       	and	r18, r14
  ea:	3f 21       	and	r19, r15
  ec:	23 2b       	or	r18, r19
  ee:	b1 f0       	breq	.+44     	; 0x11c <main+0x80>

    while(1)
	
    {
		
		for(i=0;i<4;i++){
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	c4 30       	cpi	r28, 0x04	; 4
  f4:	d1 05       	cpc	r29, r1
  f6:	08 f3       	brcs	.-62     	; 0xba <main+0x1e>
			if( BIT_CHECK(INP_PORTPIN,i) && (!BIT_CHECK(status,i))) {
				Blink_On(i);
				DATABIT_SET(status,i);
			}			
		}
		if((INP_PORTPIN & 0x0f) !=status){		//4 bits only
  f8:	26 b3       	in	r18, 0x16	; 22
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	80 91 60 00 	lds	r24, 0x0060
 102:	90 91 61 00 	lds	r25, 0x0061
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	21 f0       	breq	.+8      	; 0x114 <main+0x78>
			BIT_SET(ALM_PORT,0);
 10c:	a8 9a       	sbi	0x15, 0	; 21

    while(1)
	
    {
		
		for(i=0;i<4;i++){
 10e:	cc 2d       	mov	r28, r12
 110:	dd 2d       	mov	r29, r13
 112:	ef cf       	rjmp	.-34     	; 0xf2 <main+0x56>
			}			
		}
		if((INP_PORTPIN & 0x0f) !=status){		//4 bits only
			BIT_SET(ALM_PORT,0);
		}else{
			BIT_CLEAR(ALM_PORT,0);
 114:	a8 98       	cbi	0x15, 0	; 21

    while(1)
	
    {
		
		for(i=0;i<4;i++){
 116:	cc 2d       	mov	r28, r12
 118:	dd 2d       	mov	r29, r13
 11a:	eb cf       	rjmp	.-42     	; 0xf2 <main+0x56>
			if( BIT_CHECK(INP_PORTPIN,i) && (!BIT_CHECK(status,i))) {
				Blink_On(i);
 11c:	95 df       	rcall	.-214    	; 0x48 <_Z8Blink_Oni>
				DATABIT_SET(status,i);
 11e:	80 91 60 00 	lds	r24, 0x0060
 122:	90 91 61 00 	lds	r25, 0x0061
 126:	e8 2a       	or	r14, r24
 128:	f9 2a       	or	r15, r25
 12a:	f0 92 61 00 	sts	0x0061, r15
 12e:	e0 92 60 00 	sts	0x0060, r14
 132:	de cf       	rjmp	.-68     	; 0xf0 <main+0x54>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
