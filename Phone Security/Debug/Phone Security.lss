
Phone Security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  000002ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002df  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000151  00000000  00000000  000005f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f2  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000205  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000123  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	f3 c0       	rjmp	.+486    	; 0x1f4 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e1       	ldi	r30, 0x16	; 22
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	25 d0       	rcall	.+74     	; 0xa4 <main>
  5a:	db c0       	rjmp	.+438    	; 0x212 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z11BlinkAll_Onv>:
		BIT_SET(LED_PORT,b);
		_delay_ms(BLINK_PERIOD);
	}
}

void BlinkAll_On(){			//Blink and then turn on
  5e:	83 e0       	ldi	r24, 0x03	; 3
  60:	90 e0       	ldi	r25, 0x00	; 0
	
	for(int i=0;i<3;i++){
		LED_PORT &= ~flashLED;			//flashLED;
  62:	32 b3       	in	r19, 0x12	; 18
  64:	20 91 62 00 	lds	r18, 0x0062
  68:	20 95       	com	r18
  6a:	23 23       	and	r18, r19
  6c:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	2f e7       	ldi	r18, 0x7F	; 127
  70:	38 e3       	ldi	r19, 0x38	; 56
  72:	41 e0       	ldi	r20, 0x01	; 1
  74:	21 50       	subi	r18, 0x01	; 1
  76:	30 40       	sbci	r19, 0x00	; 0
  78:	40 40       	sbci	r20, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <_Z11BlinkAll_Onv+0x16>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z11BlinkAll_Onv+0x20>
  7e:	00 00       	nop
		
		_delay_ms(BLINK_PERIOD);
		
		LED_PORT |= flashLED;
  80:	32 b3       	in	r19, 0x12	; 18
  82:	20 91 62 00 	lds	r18, 0x0062
  86:	23 2b       	or	r18, r19
  88:	22 bb       	out	0x12, r18	; 18
  8a:	2f e7       	ldi	r18, 0x7F	; 127
  8c:	38 e3       	ldi	r19, 0x38	; 56
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <_Z11BlinkAll_Onv+0x32>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_Z11BlinkAll_Onv+0x3c>
  9a:	00 00       	nop
  9c:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void BlinkAll_On(){			//Blink and then turn on
	
	for(int i=0;i<3;i++){
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	01 f7       	brne	.-64     	; 0x62 <_Z11BlinkAll_Onv+0x4>
		_delay_ms(BLINK_PERIOD);
		
		LED_PORT |= flashLED;
		_delay_ms(BLINK_PERIOD);
	}
}
  a2:	08 95       	ret

000000a4 <main>:

int main(void)
{
	unsigned int i=0;
	INP_PORTDDR=0x0;			//as input
  a4:	17 ba       	out	0x17, r1	; 23
	LED_PORTDDR=0xff;			//as output
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	81 bb       	out	0x11, r24	; 17
	ALM_PORTDDR=0x1;			//as output on PIN0
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	94 bb       	out	0x14, r25	; 20
	

	INP_PORT=0xff;			//enable pull-up resistor
  ae:	88 bb       	out	0x18, r24	; 24
	LED_PORT=0;				//Turn off all LEDs
  b0:	12 ba       	out	0x12, r1	; 18
	ALM_PORT=0x0;
  b2:	15 ba       	out	0x15, r1	; 21

	BIT_SET(ALM_PORT,1);		//Enable pull-up resistor
  b4:	a9 9a       	sbi	0x15, 1	; 21
			}
			locked=1;
		}else{
			if(oldstatus!=INP_PORTPIN){
				flashLED=0;
				for(i=0;i<4;i++){
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	10 e0       	ldi	r17, 0x00	; 0
							//flashLED |= (1<i);
							BIT_SET(flashLED,i);
							BIT_CLEAR(oldstatus,i);
						}
					}else{
						BIT_CLEAR(LED_PORT,i);
  ba:	c1 e0       	ldi	r28, 0x01	; 1
  bc:	d0 e0       	ldi	r29, 0x00	; 0
				if(((INP_PORTPIN & 0x0f) != status) && (!alarmMode)){		//4 bits only
					BIT_SET(ALM_PORT,0);			//produce the alarm until unlocked
					alarmMode=1;
				}
			}
			locked=1;
  be:	ff 24       	eor	r15, r15
  c0:	f3 94       	inc	r15
*/

    while(1)
	
    {
		if (!BIT_CHECK(ALM_PORTPIN ,1)){			// Check whether the button is pressed
  c2:	99 99       	sbic	0x13, 1	; 19
  c4:	46 c0       	rjmp	.+140    	; 0x152 <main+0xae>
			if(!locked){
  c6:	80 91 65 00 	lds	r24, 0x0065
  ca:	81 11       	cpse	r24, r1
  cc:	34 c0       	rjmp	.+104    	; 0x136 <main+0x92>
				flashLED=0;
  ce:	10 92 62 00 	sts	0x0062, r1
				for(i=0;i<4;i++){
  d2:	80 2f       	mov	r24, r16
  d4:	91 2f       	mov	r25, r17
					if( !BIT_CHECK(INP_PORTPIN,i)) {
  d6:	26 b3       	in	r18, 0x16	; 22
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	08 2e       	mov	r0, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x3e>
  de:	35 95       	asr	r19
  e0:	27 95       	ror	r18
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x3a>
  e6:	20 fd       	sbrc	r18, 0
  e8:	14 c0       	rjmp	.+40     	; 0x112 <main+0x6e>
						//Blink_On(i);
						BIT_SET(flashLED ,i);
  ea:	40 91 62 00 	lds	r20, 0x0062
  ee:	9e 01       	movw	r18, r28
  f0:	08 2e       	mov	r0, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x54>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <main+0x50>
  fc:	34 2f       	mov	r19, r20
  fe:	32 2b       	or	r19, r18
 100:	30 93 62 00 	sts	0x0062, r19
						BIT_CLEAR(status,i);
 104:	20 95       	com	r18
 106:	30 91 64 00 	lds	r19, 0x0064
 10a:	23 23       	and	r18, r19
 10c:	20 93 64 00 	sts	0x0064, r18
 110:	0c c0       	rjmp	.+24     	; 0x12a <main+0x86>
					}else{
						BIT_SET(status,i);
 112:	40 91 64 00 	lds	r20, 0x0064
 116:	9e 01       	movw	r18, r28
 118:	08 2e       	mov	r0, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x7c>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <main+0x78>
 124:	24 2b       	or	r18, r20
 126:	20 93 64 00 	sts	0x0064, r18
	
    {
		if (!BIT_CHECK(ALM_PORTPIN ,1)){			// Check whether the button is pressed
			if(!locked){
				flashLED=0;
				for(i=0;i<4;i++){
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	84 30       	cpi	r24, 0x04	; 4
 12e:	91 05       	cpc	r25, r1
 130:	91 f6       	brne	.-92     	; 0xd6 <main+0x32>
						BIT_CLEAR(status,i);
					}else{
						BIT_SET(status,i);
					}
				}
				BlinkAll_On();
 132:	95 df       	rcall	.-214    	; 0x5e <_Z11BlinkAll_Onv>
 134:	0b c0       	rjmp	.+22     	; 0x14c <main+0xa8>
			}else{
				if(((INP_PORTPIN & 0x0f) != status) && (!alarmMode)){		//4 bits only
 136:	96 b3       	in	r25, 0x16	; 22
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	80 91 64 00 	lds	r24, 0x0064
 13e:	98 17       	cp	r25, r24
 140:	29 f0       	breq	.+10     	; 0x14c <main+0xa8>
 142:	80 91 63 00 	lds	r24, 0x0063
 146:	88 23       	and	r24, r24
 148:	09 f4       	brne	.+2      	; 0x14c <main+0xa8>
 14a:	50 c0       	rjmp	.+160    	; 0x1ec <main+0x148>
					BIT_SET(ALM_PORT,0);			//produce the alarm until unlocked
					alarmMode=1;
				}
			}
			locked=1;
 14c:	f0 92 65 00 	sts	0x0065, r15
 150:	b8 cf       	rjmp	.-144    	; 0xc2 <main+0x1e>
		}else{
			if(oldstatus!=INP_PORTPIN){
 152:	96 b3       	in	r25, 0x16	; 22
 154:	80 91 60 00 	lds	r24, 0x0060
 158:	98 17       	cp	r25, r24
 15a:	09 f4       	brne	.+2      	; 0x15e <main+0xba>
 15c:	41 c0       	rjmp	.+130    	; 0x1e0 <main+0x13c>
				flashLED=0;
 15e:	10 92 62 00 	sts	0x0062, r1
				for(i=0;i<4;i++){
 162:	80 2f       	mov	r24, r16
 164:	91 2f       	mov	r25, r17
					if( !BIT_CHECK(INP_PORTPIN,i)){
 166:	26 b3       	in	r18, 0x16	; 22
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	08 2e       	mov	r0, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xce>
 16e:	35 95       	asr	r19
 170:	27 95       	ror	r18
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <main+0xca>
 176:	20 fd       	sbrc	r18, 0
 178:	1d c0       	rjmp	.+58     	; 0x1b4 <main+0x110>
						if (BIT_CHECK(oldstatus,i))   {
 17a:	40 91 60 00 	lds	r20, 0x0060
 17e:	24 2f       	mov	r18, r20
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	08 2e       	mov	r0, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0xe6>
 186:	35 95       	asr	r19
 188:	27 95       	ror	r18
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <main+0xe2>
 18e:	20 ff       	sbrs	r18, 0
 190:	22 c0       	rjmp	.+68     	; 0x1d6 <main+0x132>
							//Blink_On(i);
							//flashLED |= (1<i);
							BIT_SET(flashLED,i);
 192:	9e 01       	movw	r18, r28
 194:	08 2e       	mov	r0, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <main+0xf8>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <main+0xf4>
 1a0:	30 91 62 00 	lds	r19, 0x0062
 1a4:	32 2b       	or	r19, r18
 1a6:	30 93 62 00 	sts	0x0062, r19
							BIT_CLEAR(oldstatus,i);
 1aa:	20 95       	com	r18
 1ac:	42 23       	and	r20, r18
 1ae:	40 93 60 00 	sts	0x0060, r20
 1b2:	11 c0       	rjmp	.+34     	; 0x1d6 <main+0x132>
						}
					}else{
						BIT_CLEAR(LED_PORT,i);
 1b4:	42 b3       	in	r20, 0x12	; 18
 1b6:	9e 01       	movw	r18, r28
 1b8:	08 2e       	mov	r0, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <main+0x11c>
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <main+0x118>
 1c4:	32 2f       	mov	r19, r18
 1c6:	30 95       	com	r19
 1c8:	34 23       	and	r19, r20
 1ca:	32 bb       	out	0x12, r19	; 18
						BIT_SET(oldstatus,i);
 1cc:	30 91 60 00 	lds	r19, 0x0060
 1d0:	23 2b       	or	r18, r19
 1d2:	20 93 60 00 	sts	0x0060, r18
			}
			locked=1;
		}else{
			if(oldstatus!=INP_PORTPIN){
				flashLED=0;
				for(i=0;i<4;i++){
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	91 05       	cpc	r25, r1
 1dc:	21 f6       	brne	.-120    	; 0x166 <main+0xc2>
					}else{
						BIT_CLEAR(LED_PORT,i);
						BIT_SET(oldstatus,i);
					}
				}
				BlinkAll_On();
 1de:	3f df       	rcall	.-386    	; 0x5e <_Z11BlinkAll_Onv>
				
			}
			BIT_CLEAR(ALM_PORT,0);			//clear the alarm
 1e0:	a8 98       	cbi	0x15, 0	; 21
			locked=0;
 1e2:	10 92 65 00 	sts	0x0065, r1
			alarmMode=0;
 1e6:	10 92 63 00 	sts	0x0063, r1
 1ea:	6b cf       	rjmp	.-298    	; 0xc2 <main+0x1e>
					}
				}
				BlinkAll_On();
			}else{
				if(((INP_PORTPIN & 0x0f) != status) && (!alarmMode)){		//4 bits only
					BIT_SET(ALM_PORT,0);			//produce the alarm until unlocked
 1ec:	a8 9a       	sbi	0x15, 0	; 21
					alarmMode=1;
 1ee:	f0 92 63 00 	sts	0x0063, r15
 1f2:	ac cf       	rjmp	.-168    	; 0x14c <main+0xa8>

000001f4 <__vector_6>:
    }
}
	
	
ISR (TIMER1_COMPA_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
	if(BIT_CHECK(ALM_PORTPIN,0)){
 1fe:	98 9b       	sbis	0x13, 0	; 19
 200:	02 c0       	rjmp	.+4      	; 0x206 <__vector_6+0x12>
		BIT_CLEAR(ALM_PORT,0);
 202:	a8 98       	cbi	0x15, 0	; 21
 204:	01 c0       	rjmp	.+2      	; 0x208 <__vector_6+0x14>
	}else{
		BIT_SET(ALM_PORT,0);
 206:	a8 9a       	sbi	0x15, 0	; 21
	}
	// action to be done every 1s
}
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
