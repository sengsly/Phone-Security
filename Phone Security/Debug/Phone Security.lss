
Phone Security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000020e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000226  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000151  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001aa  00000000  00000000  0000067b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001df  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00000a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	ef c0       	rjmp	.+478    	; 0x1ec <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e0       	ldi	r30, 0x0E	; 14
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 36       	cpi	r26, 0x65	; 101
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2c d0       	rcall	.+88     	; 0xb2 <main>
  5a:	d7 c0       	rjmp	.+430    	; 0x20a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z8Blink_Oni>:
uint8_t alarmMode=0;			//

void Blink_On(int b){			//Blink and then turn on
	
	for(int i=0;i<3;i++){
		BIT_CLEAR(LED_PORT,b);
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	a9 01       	movw	r20, r18
  64:	02 c0       	rjmp	.+4      	; 0x6a <_Z8Blink_Oni+0xc>
  66:	44 0f       	add	r20, r20
  68:	55 1f       	adc	r21, r21
  6a:	8a 95       	dec	r24
  6c:	e2 f7       	brpl	.-8      	; 0x66 <_Z8Blink_Oni+0x8>
  6e:	ca 01       	movw	r24, r20
  70:	40 95       	com	r20
		_delay_ms(BLINK_PERIOD);
		
		BIT_SET(LED_PORT,b);
  72:	23 e0       	ldi	r18, 0x03	; 3
  74:	30 e0       	ldi	r19, 0x00	; 0
uint8_t alarmMode=0;			//

void Blink_On(int b){			//Blink and then turn on
	
	for(int i=0;i<3;i++){
		BIT_CLEAR(LED_PORT,b);
  76:	92 b3       	in	r25, 0x12	; 18
  78:	94 23       	and	r25, r20
  7a:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	5f e7       	ldi	r21, 0x7F	; 127
  7e:	68 e3       	ldi	r22, 0x38	; 56
  80:	91 e0       	ldi	r25, 0x01	; 1
  82:	51 50       	subi	r21, 0x01	; 1
  84:	60 40       	sbci	r22, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <_Z8Blink_Oni+0x24>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_Z8Blink_Oni+0x2e>
  8c:	00 00       	nop
		_delay_ms(BLINK_PERIOD);
		
		BIT_SET(LED_PORT,b);
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	98 2b       	or	r25, r24
  92:	92 bb       	out	0x12, r25	; 18
  94:	5f e7       	ldi	r21, 0x7F	; 127
  96:	68 e3       	ldi	r22, 0x38	; 56
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	51 50       	subi	r21, 0x01	; 1
  9c:	60 40       	sbci	r22, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <_Z8Blink_Oni+0x3c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_Z8Blink_Oni+0x46>
  a4:	00 00       	nop
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	31 09       	sbc	r19, r1
uint8_t oldstatus=0xff;
uint8_t alarmMode=0;			//

void Blink_On(int b){			//Blink and then turn on
	
	for(int i=0;i<3;i++){
  aa:	21 15       	cp	r18, r1
  ac:	31 05       	cpc	r19, r1
  ae:	19 f7       	brne	.-58     	; 0x76 <_Z8Blink_Oni+0x18>
		_delay_ms(BLINK_PERIOD);
		
		BIT_SET(LED_PORT,b);
		_delay_ms(BLINK_PERIOD);
	}
}
  b0:	08 95       	ret

000000b2 <main>:

int main(void)
{
	unsigned int i=0;
	INP_PORTDDR=0x0;			//as input
  b2:	17 ba       	out	0x17, r1	; 23
	LED_PORTDDR=0xff;			//as output
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
	ALM_PORTDDR=0x1;			//as output on PIN0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	94 bb       	out	0x14, r25	; 20
	

	INP_PORT=0xff;			//enable pull-up resistor
  bc:	88 bb       	out	0x18, r24	; 24
	LED_PORT=0;				//Turn off all LEDs
  be:	12 ba       	out	0x12, r1	; 18
	ALM_PORT=0x0;
  c0:	15 ba       	out	0x15, r1	; 21

	BIT_SET(ALM_PORT,1);		//Enable pull-up resistor
  c2:	a9 9a       	sbi	0x15, 1	; 21
					alarmMode=1;
				}
			}
			locked=1;
		}else{
			if(oldstatus!=INP_PORTPIN){
  c4:	e1 2c       	mov	r14, r1
  c6:	f1 2c       	mov	r15, r1
						if (BIT_CHECK(oldstatus,i))   {
							Blink_On(i);
							BIT_CLEAR(oldstatus,i);
						}
					}else{
						BIT_CLEAR(LED_PORT,i);
  c8:	01 e0       	ldi	r16, 0x01	; 1
  ca:	10 e0       	ldi	r17, 0x00	; 0
				if(((INP_PORTPIN & 0x0f) != status) && (!alarmMode)){		//4 bits only
					BIT_SET(ALM_PORT,0);			//produce the alarm until unlocked
					alarmMode=1;
				}
			}
			locked=1;
  cc:	dd 24       	eor	r13, r13
  ce:	d3 94       	inc	r13
*/

    while(1)
	
    {
		if (!BIT_CHECK(ALM_PORTPIN ,1)){			// Check whether the button is pressed
  d0:	99 99       	sbic	0x13, 1	; 19
  d2:	40 c0       	rjmp	.+128    	; 0x154 <main+0xa2>
			if(!locked){
  d4:	80 91 64 00 	lds	r24, 0x0064
  d8:	81 11       	cpse	r24, r1
  da:	2e c0       	rjmp	.+92     	; 0x138 <main+0x86>
  dc:	ce 2d       	mov	r28, r14
  de:	df 2d       	mov	r29, r15
				for(i=0;i<4;i++){
					if( !BIT_CHECK(INP_PORTPIN,i)) {
  e0:	86 b3       	in	r24, 0x16	; 22
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0c 2e       	mov	r0, r28
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x3a>
  e8:	95 95       	asr	r25
  ea:	87 95       	ror	r24
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x36>
  f0:	80 fd       	sbrc	r24, 0
  f2:	11 c0       	rjmp	.+34     	; 0x116 <main+0x64>
						Blink_On(i);
  f4:	8c 2f       	mov	r24, r28
  f6:	9d 2f       	mov	r25, r29
  f8:	b2 df       	rcall	.-156    	; 0x5e <_Z8Blink_Oni>
						BIT_CLEAR(status,i);
  fa:	c8 01       	movw	r24, r16
  fc:	0c 2e       	mov	r0, r28
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x52>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <main+0x4e>
 108:	80 95       	com	r24
 10a:	90 91 63 00 	lds	r25, 0x0063
 10e:	89 23       	and	r24, r25
 110:	80 93 63 00 	sts	0x0063, r24
 114:	0c c0       	rjmp	.+24     	; 0x12e <main+0x7c>
					}else{
						BIT_SET(status,i);
 116:	20 91 63 00 	lds	r18, 0x0063
 11a:	c8 01       	movw	r24, r16
 11c:	0c 2e       	mov	r0, r28
 11e:	02 c0       	rjmp	.+4      	; 0x124 <main+0x72>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <main+0x6e>
 128:	82 2b       	or	r24, r18
 12a:	80 93 63 00 	sts	0x0063, r24
    while(1)
	
    {
		if (!BIT_CHECK(ALM_PORTPIN ,1)){			// Check whether the button is pressed
			if(!locked){
				for(i=0;i<4;i++){
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	c4 30       	cpi	r28, 0x04	; 4
 132:	d1 05       	cpc	r29, r1
 134:	a9 f6       	brne	.-86     	; 0xe0 <main+0x2e>
 136:	0b c0       	rjmp	.+22     	; 0x14e <main+0x9c>
					}else{
						BIT_SET(status,i);
					}
				}
			}else{
				if(((INP_PORTPIN & 0x0f) != status) && (!alarmMode)){		//4 bits only
 138:	96 b3       	in	r25, 0x16	; 22
 13a:	9f 70       	andi	r25, 0x0F	; 15
 13c:	80 91 63 00 	lds	r24, 0x0063
 140:	98 17       	cp	r25, r24
 142:	29 f0       	breq	.+10     	; 0x14e <main+0x9c>
 144:	80 91 62 00 	lds	r24, 0x0062
 148:	88 23       	and	r24, r24
 14a:	09 f4       	brne	.+2      	; 0x14e <main+0x9c>
 14c:	4b c0       	rjmp	.+150    	; 0x1e4 <main+0x132>
					BIT_SET(ALM_PORT,0);			//produce the alarm until unlocked
					alarmMode=1;
				}
			}
			locked=1;
 14e:	d0 92 64 00 	sts	0x0064, r13
 152:	be cf       	rjmp	.-132    	; 0xd0 <main+0x1e>
		}else{
			if(oldstatus!=INP_PORTPIN){
 154:	96 b3       	in	r25, 0x16	; 22
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	98 17       	cp	r25, r24
 15c:	e9 f1       	breq	.+122    	; 0x1d8 <main+0x126>
 15e:	ce 2d       	mov	r28, r14
 160:	df 2d       	mov	r29, r15
				for(i=0;i<4;i++){
					if( !BIT_CHECK(INP_PORTPIN,i)){
 162:	26 b3       	in	r18, 0x16	; 22
 164:	9d 2f       	mov	r25, r29
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	8c 2f       	mov	r24, r28
 16a:	0c 2e       	mov	r0, r28
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xc0>
 16e:	35 95       	asr	r19
 170:	27 95       	ror	r18
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <main+0xbc>
 176:	20 fd       	sbrc	r18, 0
 178:	1a c0       	rjmp	.+52     	; 0x1ae <main+0xfc>
						if (BIT_CHECK(oldstatus,i))   {
 17a:	20 91 60 00 	lds	r18, 0x0060
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	0c 2e       	mov	r0, r28
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0xd6>
 184:	35 95       	asr	r19
 186:	27 95       	ror	r18
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <main+0xd2>
 18c:	20 ff       	sbrs	r18, 0
 18e:	20 c0       	rjmp	.+64     	; 0x1d0 <main+0x11e>
							Blink_On(i);
 190:	66 df       	rcall	.-308    	; 0x5e <_Z8Blink_Oni>
							BIT_CLEAR(oldstatus,i);
 192:	c8 01       	movw	r24, r16
 194:	0c 2e       	mov	r0, r28
 196:	02 c0       	rjmp	.+4      	; 0x19c <main+0xea>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <main+0xe6>
 1a0:	80 95       	com	r24
 1a2:	90 91 60 00 	lds	r25, 0x0060
 1a6:	89 23       	and	r24, r25
 1a8:	80 93 60 00 	sts	0x0060, r24
 1ac:	11 c0       	rjmp	.+34     	; 0x1d0 <main+0x11e>
						}
					}else{
						BIT_CLEAR(LED_PORT,i);
 1ae:	22 b3       	in	r18, 0x12	; 18
 1b0:	c8 01       	movw	r24, r16
 1b2:	0c 2e       	mov	r0, r28
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0x108>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <main+0x104>
 1be:	98 2f       	mov	r25, r24
 1c0:	90 95       	com	r25
 1c2:	92 23       	and	r25, r18
 1c4:	92 bb       	out	0x12, r25	; 18
						BIT_SET(oldstatus,i);
 1c6:	90 91 60 00 	lds	r25, 0x0060
 1ca:	89 2b       	or	r24, r25
 1cc:	80 93 60 00 	sts	0x0060, r24
				}
			}
			locked=1;
		}else{
			if(oldstatus!=INP_PORTPIN){
				for(i=0;i<4;i++){
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	c4 30       	cpi	r28, 0x04	; 4
 1d4:	d1 05       	cpc	r29, r1
 1d6:	29 f6       	brne	.-118    	; 0x162 <main+0xb0>
						BIT_CLEAR(LED_PORT,i);
						BIT_SET(oldstatus,i);
					}
				}
			}
			BIT_CLEAR(ALM_PORT,0);			//clear the alarm
 1d8:	a8 98       	cbi	0x15, 0	; 21
			locked=0;
 1da:	10 92 64 00 	sts	0x0064, r1
			alarmMode=0;
 1de:	10 92 62 00 	sts	0x0062, r1
 1e2:	76 cf       	rjmp	.-276    	; 0xd0 <main+0x1e>
						BIT_SET(status,i);
					}
				}
			}else{
				if(((INP_PORTPIN & 0x0f) != status) && (!alarmMode)){		//4 bits only
					BIT_SET(ALM_PORT,0);			//produce the alarm until unlocked
 1e4:	a8 9a       	sbi	0x15, 0	; 21
					alarmMode=1;
 1e6:	d0 92 62 00 	sts	0x0062, r13
 1ea:	b1 cf       	rjmp	.-158    	; 0x14e <main+0x9c>

000001ec <__vector_6>:
    }
}
	
	
ISR (TIMER1_COMPA_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
	if(BIT_CHECK(ALM_PORTPIN,0)){
 1f6:	98 9b       	sbis	0x13, 0	; 19
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__vector_6+0x12>
		BIT_CLEAR(ALM_PORT,0);
 1fa:	a8 98       	cbi	0x15, 0	; 21
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <__vector_6+0x14>
	}else{
		BIT_SET(ALM_PORT,0);
 1fe:	a8 9a       	sbi	0x15, 0	; 21
	}
	// action to be done every 1s
}
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
